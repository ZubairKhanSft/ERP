// <auto-generated />
using System;
using AccountErp.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AccountErp.DataLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230825111551_VatAmountInInvoice")]
    partial class VatAmountInInvoice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AccountErp.DataLayer.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("LastLogOn");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AccountErp.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(1000);

                    b.Property<int?>("CountryId");

                    b.Property<int?>("CountryId1");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<string>("StreetName")
                        .HasMaxLength(100);

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountryId1");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AccountErp.Entities.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCode");

                    b.Property<string>("AccountHolderName")
                        .HasMaxLength(250);

                    b.Property<string>("AccountId");

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50);

                    b.Property<string>("BankName")
                        .HasMaxLength(100);

                    b.Property<string>("BranchName")
                        .HasMaxLength(250);

                    b.Property<int?>("COA_AccountTypeId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Ifsc")
                        .HasMaxLength(20);

                    b.Property<bool>("IsForEdit");

                    b.Property<int?>("LedgerType");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("COA_AccountTypeId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("AccountErp.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BillDate");

                    b.Property<string>("BillNumber");

                    b.Property<int>("BillType");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<DateTime?>("DueDate");

                    b.Property<decimal?>("LineAmountSubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("Notes");

                    b.Property<decimal?>("PoSoNumber")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("RefrenceNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<string>("StrBillDate");

                    b.Property<string>("StrDueDate");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("AccountErp.Entities.BillAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillAttachments");
                });

            modelBuilder.Entity("AccountErp.Entities.BillItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BillId");

                    b.Property<int?>("ItemId");

                    b.Property<decimal>("LineAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(10,2)");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("Rate")
                        .HasColumnType("NUMERIC(10,2)");

                    b.Property<int?>("TaxId");

                    b.Property<decimal>("TaxPercentage");

                    b.Property<decimal>("TaxPrice");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("BillServices");
                });

            modelBuilder.Entity("AccountErp.Entities.BillPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("BankAccountId");

                    b.Property<int>("BillId");

                    b.Property<string>("ChequeNumber");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("CreditCardId");

                    b.Property<string>("DepositTo")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int>("PaymentMode");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("BillId");

                    b.ToTable("BillPayments");
                });

            modelBuilder.Entity("AccountErp.Entities.COA_Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCode");

                    b.Property<string>("AccountName");

                    b.Property<int>("COA_AccountTypeId");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("COA_Account");
                });

            modelBuilder.Entity("AccountErp.Entities.COA_AccountMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountMasterName");

                    b.HasKey("Id");

                    b.ToTable("COA_AccountMaster");
                });

            modelBuilder.Entity("AccountErp.Entities.COA_AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountTypeCode");

                    b.Property<string>("AccountTypeName");

                    b.Property<int>("COA_AccountMasterId");

                    b.HasKey("Id");

                    b.HasIndex("COA_AccountMasterId");

                    b.ToTable("COA_AccountType");
                });

            modelBuilder.Entity("AccountErp.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(250);

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(250);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("AccountErp.Entities.Country", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("IsoCode")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AccountErp.Entities.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("AccountErp.Entities.CreditMemo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CreditMemoNumber");

                    b.Property<int>("CustomerId");

                    b.Property<decimal>("DiffAmmount");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<int?>("InvoiceId");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal?>("LineAmountSubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("NewAmmount");

                    b.Property<decimal>("OldAmmount");

                    b.Property<decimal?>("PoSoNumber")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<string>("StrDueDate");

                    b.Property<string>("StrInvoiceDate");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("CreditMemo");
                });

            modelBuilder.Entity("AccountErp.Entities.CreditMemoService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreditMemoId");

                    b.Property<decimal>("DiffAmmount");

                    b.Property<decimal>("LineAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("NewAmmount");

                    b.Property<int>("NewQuantity");

                    b.Property<decimal>("OldAmmount");

                    b.Property<int>("OldQuantity");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("ProductId");

                    b.Property<decimal>("Rate")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("ServiceId");

                    b.Property<decimal>("TaxDiffAmmount");

                    b.Property<int?>("TaxId");

                    b.Property<decimal?>("TaxPercentage");

                    b.Property<decimal?>("TaxPrice")
                        .IsRequired()
                        .HasColumnType("NUMERIC(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreditMemoId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaxId");

                    b.ToTable("CreditMemoService");
                });

            modelBuilder.Entity("AccountErp.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("Zipcode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AccountErp.Entities.EndingStatementBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountId");

                    b.Property<decimal>("EndingBalanceAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<DateTime?>("EndingBalanceDate");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("EndingStatementBalance");
                });

            modelBuilder.Entity("AccountErp.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppovedId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CurrencyName")
                        .IsRequired();

                    b.Property<int>("CustomerId");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("InvoiceType");

                    b.Property<bool>("IsApproved");

                    b.Property<decimal?>("LineAmountSubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal?>("PoSoNumber")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<string>("StrDueDate");

                    b.Property<string>("StrInvoiceDate");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<decimal>("VatAmount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AccountErp.Entities.InvoiceAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("InvoiceId");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceAttachments");
                });

            modelBuilder.Entity("AccountErp.Entities.InvoicePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("BankAccountId");

                    b.Property<string>("ChequeNumber");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DepositFrom")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<int>("InvoiceId");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int>("PaymentMode");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoicePayments");
                });

            modelBuilder.Entity("AccountErp.Entities.InvoiceService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoiceId");

                    b.Property<decimal>("LineAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("Rate")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("ServiceId");

                    b.Property<int?>("TaxId");

                    b.Property<decimal?>("TaxPercentage");

                    b.Property<decimal?>("TaxPrice")
                        .IsRequired()
                        .HasColumnType("NUMERIC(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("InvoiceServices");
                });

            modelBuilder.Entity("AccountErp.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BankAccountId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsTaxable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<decimal>("Rate")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("SalesTaxId");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<bool?>("isForSell");

                    b.HasKey("Id");

                    b.HasIndex("SalesTaxId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("AccountErp.Entities.ItemType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("AccountErp.Entities.LoginModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RoleId");

                    b.Property<int>("UserId");

                    b.Property<DateTime?>("createdOn");

                    b.Property<bool?>("status");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginModule");
                });

            modelBuilder.Entity("AccountErp.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Name");

                    b.Property<string>("PaymentType");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("AccountErp.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("AccountErp.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("PermisionDescription")
                        .IsRequired();

                    b.Property<string>("Permisions")
                        .IsRequired();

                    b.Property<string>("PermissionCode")
                        .IsRequired();

                    b.Property<string>("ScreenCode")
                        .IsRequired();

                    b.Property<int>("ScreenId");

                    b.Property<string>("ScreenUrl")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<string>("Time_stamp");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("AccountErp.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentName");

                    b.Property<string>("Brands")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Model")
                        .IsRequired();

                    b.Property<int>("PartNumber");

                    b.Property<int?>("ProductCategoryId");

                    b.Property<double>("RateAED");

                    b.Property<double>("RateUSD");

                    b.Property<string>("Specification")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<int>("SupplierCode");

                    b.Property<string>("UAN")
                        .IsRequired();

                    b.Property<int>("Units");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AccountErp.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Productcategory");
                });

            modelBuilder.Entity("AccountErp.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("AccountErp.Entities.ProjectTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BillId");

                    b.Property<int?>("InvoiceId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TransType");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTransactions");
                });

            modelBuilder.Entity("AccountErp.Entities.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<decimal?>("LineAmountSubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("Memo");

                    b.Property<decimal?>("PoSoNumber")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<DateTime>("QuotationDate");

                    b.Property<string>("QuotationNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("QuotationType");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<string>("StrExpireDate");

                    b.Property<string>("StrQuotationDate");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("AccountErp.Entities.QuotationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("QuotationId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationAttachments");
                });

            modelBuilder.Entity("AccountErp.Entities.QuotationService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("LineAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("QuotationId");

                    b.Property<decimal>("Rate")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int?>("ServiceId");

                    b.Property<int?>("TaxId");

                    b.Property<decimal?>("TaxPercentage");

                    b.Property<decimal>("TaxPrice")
                        .HasColumnType("NUMERIC(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaxId");

                    b.ToTable("QuotationServices");
                });

            modelBuilder.Entity("AccountErp.Entities.Reconciliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountId");

                    b.Property<decimal>("IcloseBalance")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<bool>("IsReconciliation");

                    b.Property<DateTime?>("ReconciliationDate");

                    b.Property<int>("ReconciliationStatus");

                    b.Property<decimal>("StatementBalance")
                        .HasColumnType("NUMERIC(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("Reconciliations");
                });

            modelBuilder.Entity("AccountErp.Entities.RecurringInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal?>("LineAmountSubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal?>("PoSoNumber")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<DateTime>("RecDueDate");

                    b.Property<DateTime>("RecInvoiceDate");

                    b.Property<string>("RecInvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<string>("StrRecDueDate");

                    b.Property<string>("StrRecInvoiceDate");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RecurringInvoices");
                });

            modelBuilder.Entity("AccountErp.Entities.RecurringInvoiceAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("RecInvoiceId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("RecInvoiceId");

                    b.ToTable("RecurringInvoiceAttachments");
                });

            modelBuilder.Entity("AccountErp.Entities.RecurringInvoiceService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("LineAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("Rate")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<int>("RecInvoiceId");

                    b.Property<int>("ServiceId");

                    b.Property<int?>("TaxId");

                    b.Property<int?>("TaxPercentage");

                    b.Property<decimal?>("TaxPrice")
                        .IsRequired()
                        .HasColumnType("NUMERIC(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("RecInvoiceId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaxId");

                    b.ToTable("RecurringInvoiceServices");
                });

            modelBuilder.Entity("AccountErp.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Permissionid");

                    b.Property<int>("Roleid");

                    b.Property<string>("Time_stamp");

                    b.HasKey("Id");

                    b.HasIndex("Permissionid");

                    b.HasIndex("Roleid");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("AccountErp.Entities.SalesTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BankAccountId");

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("Status");

                    b.Property<decimal>("TaxPercentage");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("SalesTaxes");
                });

            modelBuilder.Entity("AccountErp.Entities.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ScreenCode")
                        .IsRequired();

                    b.Property<string>("ScreenName")
                        .IsRequired();

                    b.Property<string>("ScreenUrl")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Screen");
                });

            modelBuilder.Entity("AccountErp.Entities.ScreenAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAccess");

                    b.Property<int>("CompanyId");

                    b.Property<int?>("RoleId");

                    b.Property<int>("ScreenId");

                    b.Property<string>("Time_stamp");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ScreenId");

                    b.ToTable("ScreenAccess");
                });

            modelBuilder.Entity("AccountErp.Entities.ScreenDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ScreenCode")
                        .IsRequired();

                    b.Property<string>("ScreenName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ScreenDetail");
                });

            modelBuilder.Entity("AccountErp.Entities.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<string>("PostalCode");

                    b.Property<string>("ShippingMethod");

                    b.Property<string>("State");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("ShippingAddress");
                });

            modelBuilder.Entity("AccountErp.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BankAccountId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ContactId");

                    b.Property<int?>("ContactType");

                    b.Property<DateTime>("CreationDate");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("NUMERIC(12,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<int>("Status");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int?>("TransactionId");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(50);

                    b.Property<int>("TransactionTypeId");

                    b.Property<bool?>("isForTransEntry");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("AccountErp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("RoleId");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccountErp.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AccountErp.Entities.UserScreenAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAccess");

                    b.Property<int>("ScreenId");

                    b.Property<int>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.ToTable("UserScreenAccess");
                });

            modelBuilder.Entity("AccountErp.Entities.UserScreenPermissionAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.Property<int>("ScreenId");

                    b.Property<string>("Time_stamp");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("UserScreenPermissionAccess");
                });

            modelBuilder.Entity("AccountErp.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ShopName")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("AccountErp.Entities.WareHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("WareHouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AccountErp.Entities.Address", b =>
                {
                    b.HasOne("AccountErp.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("AccountErp.Entities.Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId1");
                });

            modelBuilder.Entity("AccountErp.Entities.BankAccount", b =>
                {
                    b.HasOne("AccountErp.Entities.COA_AccountType")
                        .WithMany("BanKAccount")
                        .HasForeignKey("COA_AccountTypeId");
                });

            modelBuilder.Entity("AccountErp.Entities.Bill", b =>
                {
                    b.HasOne("AccountErp.Entities.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.BillAttachment", b =>
                {
                    b.HasOne("AccountErp.Entities.Bill")
                        .WithMany("Attachments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.BillItem", b =>
                {
                    b.HasOne("AccountErp.Entities.Bill", "Bill")
                        .WithMany("Items")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("AccountErp.Entities.SalesTax", "Taxes")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("AccountErp.Entities.BillPayment", b =>
                {
                    b.HasOne("AccountErp.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("AccountErp.Entities.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.COA_AccountType", b =>
                {
                    b.HasOne("AccountErp.Entities.COA_AccountMaster")
                        .WithMany("AccountTypes")
                        .HasForeignKey("COA_AccountMasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.Contact", b =>
                {
                    b.HasOne("AccountErp.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("AccountErp.Entities.CreditMemo", b =>
                {
                    b.HasOne("AccountErp.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");
                });

            modelBuilder.Entity("AccountErp.Entities.CreditMemoService", b =>
                {
                    b.HasOne("AccountErp.Entities.CreditMemo")
                        .WithMany("CreditMemoService")
                        .HasForeignKey("CreditMemoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("AccountErp.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("AccountErp.Entities.SalesTax", "Taxes")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("AccountErp.Entities.EndingStatementBalance", b =>
                {
                    b.HasOne("AccountErp.Entities.BankAccount", "bank")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.Invoice", b =>
                {
                    b.HasOne("AccountErp.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.InvoiceAttachment", b =>
                {
                    b.HasOne("AccountErp.Entities.Invoice")
                        .WithMany("Attachments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.InvoicePayment", b =>
                {
                    b.HasOne("AccountErp.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("AccountErp.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.InvoiceService", b =>
                {
                    b.HasOne("AccountErp.Entities.Invoice", "Invoice")
                        .WithMany("Services")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("AccountErp.Entities.SalesTax", "Taxes")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("AccountErp.Entities.Item", b =>
                {
                    b.HasOne("AccountErp.Entities.SalesTax", "SalesTax")
                        .WithMany()
                        .HasForeignKey("SalesTaxId");
                });

            modelBuilder.Entity("AccountErp.Entities.LoginModule", b =>
                {
                    b.HasOne("AccountErp.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.Permission", b =>
                {
                    b.HasOne("AccountErp.Entities.Screen", "Screen")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.Product", b =>
                {
                    b.HasOne("AccountErp.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("AccountErp.Entities.Project", b =>
                {
                    b.HasOne("AccountErp.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.ProjectTransaction", b =>
                {
                    b.HasOne("AccountErp.Entities.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId");

                    b.HasOne("AccountErp.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("AccountErp.Entities.Project")
                        .WithMany("ProjectTransaction")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.Quotation", b =>
                {
                    b.HasOne("AccountErp.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.QuotationAttachment", b =>
                {
                    b.HasOne("AccountErp.Entities.Quotation")
                        .WithMany("Attachments")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.QuotationService", b =>
                {
                    b.HasOne("AccountErp.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("AccountErp.Entities.Quotation")
                        .WithMany("Services")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.Entities.Item", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("AccountErp.Entities.SalesTax", "Taxes")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("AccountErp.Entities.Reconciliation", b =>
                {
                    b.HasOne("AccountErp.Entities.BankAccount", "bank")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.RecurringInvoice", b =>
                {
                    b.HasOne("AccountErp.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.RecurringInvoiceAttachment", b =>
                {
                    b.HasOne("AccountErp.Entities.RecurringInvoice")
                        .WithMany("Attachments")
                        .HasForeignKey("RecInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.RecurringInvoiceService", b =>
                {
                    b.HasOne("AccountErp.Entities.RecurringInvoice")
                        .WithMany("Services")
                        .HasForeignKey("RecInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.Entities.Item", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.Entities.SalesTax", "Taxes")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("AccountErp.Entities.RolePermission", b =>
                {
                    b.HasOne("AccountErp.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("Permissionid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.Entities.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.ScreenAccess", b =>
                {
                    b.HasOne("AccountErp.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("AccountErp.Entities.Screen", "Screen")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.Transaction", b =>
                {
                    b.HasOne("AccountErp.Entities.BankAccount")
                        .WithMany("Transaction")
                        .HasForeignKey("BankAccountId");
                });

            modelBuilder.Entity("AccountErp.Entities.User", b =>
                {
                    b.HasOne("AccountErp.Entities.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountErp.Entities.UserScreenAccess", b =>
                {
                    b.HasOne("AccountErp.Entities.ScreenDetail", "Screen")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AccountErp.DataLayer.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AccountErp.DataLayer.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountErp.DataLayer.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AccountErp.DataLayer.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
